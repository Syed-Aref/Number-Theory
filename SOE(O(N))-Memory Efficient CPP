#include <vector>
#include <iostream>
#include <bitset>
using namespace std;
const int MAXN = 105;
vector<int> prime;
bitset<MAXN + 1>  is_composite;

void sieve(int n) {
	is_composite[0] = is_composite[1] = 1;
	for (int i = 2; i < n; ++i) {
		if (is_composite[i] == 0) prime.push_back(i);
		int sz = prime.size();
		for (int j = 0; j < sz && i * prime[j] <= n; ++j) {
			is_composite[i * prime[j]] = 1;
			if (i % prime[j] == 0) break;
		}
	}
}

int main()
{
	int n;
	sieve(MAXN);
	while (true)
	{
		cin >> n;
		cout << is_composite[n] << "\n";
	}
}

// Time complexity : Linear(N)
